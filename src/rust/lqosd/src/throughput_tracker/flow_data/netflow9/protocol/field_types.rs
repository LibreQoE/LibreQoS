// Extracted from https://netflow.caligare.com/netflow_v9.htm
#![allow(dead_code)]

pub(crate) const IN_BYTES:(u16, u16) = (1, 8);
pub(crate) const IN_PKTS:(u16, u16) = (2, 8);
pub(crate) const FLOWS:(u16, u16) = (3, 4);
pub(crate) const PROTOCOL:(u16, u16) = (4, 1);
pub(crate) const SRC_TOS:(u16, u16) = (5, 1);
pub(crate) const TCP_FLAGS:(u16, u16) = (6, 1);
pub(crate) const L4_SRC_PORT:(u16, u16) = (7, 2);
pub(crate) const IPV4_SRC_ADDR:(u16, u16) = (8, 4);
pub(crate) const SRC_MASK:(u16, u16) = (9, 1);
pub(crate) const INPUT_SNMP:(u16, u16) = (10, 2);
pub(crate) const L4_DST_PORT:(u16, u16) = (11, 2);
pub(crate) const IPV4_DST_ADDR:(u16, u16) = (12, 4);
pub(crate) const DST_MASK:(u16, u16) = (13, 1);
pub(crate) const OUTPUT_SNMP:(u16, u16) = (14, 2);
pub(crate) const IPV4_NEXT_HOP:(u16, u16) = (15, 4);
pub(crate) const SRC_AS:(u16, u16) = (16, 2);
pub(crate) const DST_AS:(u16, u16) = (17, 2);
pub(crate) const BGP_IPV4_NEXT_HOP:(u16, u16) = (18, 4);
pub(crate) const MUL_DST_PKTS:(u16, u16) = (19, 4);
pub(crate) const MUL_DST_BYTES:(u16, u16) = (20, 4);
pub(crate) const LAST_SWITCHED:(u16, u16) = (21, 4);
pub(crate) const FIRST_SWITCHED:(u16, u16) = (22, 4);
pub(crate) const OUT_BYTES:(u16, u16) = (23, 4);
pub(crate) const OUT_PKTS:(u16, u16) = (24, 4);
pub(crate) const MIN_PKT_LNGTH:(u16, u16) = (25, 2);
pub(crate) const MAX_PKT_LNGTH:(u16, u16) = (26, 2);
pub(crate) const IPV6_SRC_ADDR:(u16, u16) = (27, 16);
pub(crate) const IPV6_DST_ADDR:(u16, u16) = (28, 16);
pub(crate) const IPV6_SRC_MASK:(u16, u16) = (29, 1);
pub(crate) const IPV6_DST_MASK:(u16, u16) = (30, 1);
pub(crate) const IPV6_FLOW_LABEL:(u16, u16) = (31, 3);
pub(crate) const ICMP_TYPE:(u16, u16) = (32, 2);
pub(crate) const MUL_IGMP_TYPE:(u16, u16) = (33, 1);
pub(crate) const SAMPLING_INTERVAL:(u16, u16) = (34, 4);
pub(crate) const SAMPLING_ALGORITHM:(u16, u16) = (35, 1);
pub(crate) const FLOW_ACTIVE_TIMEOUT:(u16, u16) = (36, 2);
pub(crate) const FLOW_INACTIVE_TIMEOUT:(u16, u16) = (37, 2);
pub(crate) const ENGINE_TYPE:(u16, u16) = (38, 1);
pub(crate) const ENGINE_ID:(u16, u16) = (39, 1);
pub(crate) const TOTAL_BYTES_EXP:(u16, u16) = (40, 4);
pub(crate) const TOTAL_PKTS_EXP:(u16, u16) = (41, 4);
pub(crate) const TOTAL_FLOWS_EXP:(u16, u16) = (42, 4);
pub(crate) const IPV4_SRC_PREFIX:(u16, u16) = (44, 4);
pub(crate) const IPV4_DST_PREFIX:(u16, u16) = (45, 4);
pub(crate) const MPLS_TOP_LABEL_TYPE:(u16, u16) = (46, 1);
pub(crate) const MPLS_TOP_LABEL_IP_ADDR:(u16, u16) = (47, 4);
pub(crate) const FLOW_SAMPLER_ID:(u16, u16) = (48, 1);
pub(crate) const FLOW_SAMPLER_MODE:(u16, u16) = (49, 1);
pub(crate) const FLOW_SAMPLER_RANDOM_INTERVAL:(u16, u16) = (50, 4);
pub(crate) const MIN_TTL:(u16, u16) = (52, 1);
pub(crate) const MAX_TTL:(u16, u16) = (53, 1);
pub(crate) const IPV4_IDENT:(u16, u16) = (54, 2);
pub(crate) const DST_TOS:(u16, u16) = (55, 1);
pub(crate) const IN_SRC_MAC:(u16, u16) = (56, 6);
pub(crate) const OUT_DST_MAC:(u16, u16) = (57, 6);
pub(crate) const SRC_VLAN:(u16, u16) = (58, 2);
pub(crate) const DST_VLAN:(u16, u16) = (59, 2);
pub(crate) const IP_PROTOCOL_VERSION:(u16, u16) = (60, 1);
pub(crate) const DIRECTION:(u16, u16) = (61, 1);
pub(crate) const IPV6_NEXT_HOP:(u16, u16) = (62, 16);
pub(crate) const BPG_IPV6_NEXT_HOP:(u16, u16) = (63, 16);
pub(crate) const IPV6_OPTION_HEADERS:(u16, u16) = (64, 4);
pub(crate) const MPLS_LABEL_1:(u16, u16) = (70, 3);
pub(crate) const MPLS_LABEL_2:(u16, u16) = (71, 3);
pub(crate) const MPLS_LABEL_3:(u16, u16) = (72, 3);
pub(crate) const MPLS_LABEL_4:(u16, u16) = (73, 3);
pub(crate) const MPLS_LABEL_5:(u16, u16) = (74, 3);
pub(crate) const MPLS_LABEL_6:(u16, u16) = (75, 3);
pub(crate) const MPLS_LABEL_7:(u16, u16) = (76, 3);
pub(crate) const MPLS_LABEL_8:(u16, u16) = (77, 3);
pub(crate) const MPLS_LABEL_9:(u16, u16) = (78, 3);
pub(crate) const MPLS_LABEL_10:(u16, u16) = (79, 3);
pub(crate) const IN_DST_MAC:(u16, u16) = (80, 6);
pub(crate) const OUT_SRC_MAC:(u16, u16) = (81, 6);
pub(crate) const IF_NAME:(u16, u16) = (82, 0);
pub(crate) const IF_DESC:(u16, u16) = (83, 0);
pub(crate) const SAMPLER_NAME:(u16, u16) = (84, 0);
pub(crate) const IN_PERMANENT_BYTES:(u16, u16) = (85, 4);
pub(crate) const IN_PERMANENT_PKTS:(u16, u16) = (86, 4);
