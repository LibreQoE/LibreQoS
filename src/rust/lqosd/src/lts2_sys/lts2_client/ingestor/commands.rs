use std::net::IpAddr;
use crate::lts2_sys::shared_types::{CircuitCakeDrops, CircuitCakeMarks, CircuitRetransmits, CircuitRtt, CircuitThroughput, SiteCakeDrops, SiteCakeMarks, SiteRetransmits, SiteRtt, SiteThroughput};

#[derive(Debug, Clone)]
pub(crate) enum IngestorCommand {
    TotalThroughput {
        timestamp: u64,
        download_bytes: u64,
        upload_bytes: u64,
        shaped_download_bytes: u64,
        shaped_upload_bytes: u64,
        packets_down: u64,
        packets_up: u64,
        tcp_packets_down: u64,
        tcp_packets_up: u64,
        udp_packets_down: u64,
        udp_packets_up: u64,
        icmp_packets_down: u64,
        icmp_packets_up: u64,
        max_rtt: Option<f32>,
        min_rtt: Option<f32>,
        median_rtt: Option<f32>,
        tcp_retransmits_down: i32,
        tcp_retransmits_up: i32,
        cake_marks_down: i32,
        cake_marks_up: i32,
        cake_drops_down: i32,
        cake_drops_up: i32,
    },
    ShapedDevices {
        timestamp: u64,
        devices: Vec<u8>,
    },
    CircuitThroughputBatch(Vec<CircuitThroughput>),
    CircuitRetransmitsBatch(Vec<CircuitRetransmits>),
    CircuitRttBatch(Vec<CircuitRtt>),
    CircuitCakeDropsBatch(Vec<CircuitCakeDrops>),
    CircuitCakeMarksBatch(Vec<CircuitCakeMarks>),
    NetworkTree {
        timestamp: u64,
        tree: Vec<u8>,
    },
    SiteThroughputBatch(Vec<SiteThroughput>),
    SiteRetransmitsBatch(Vec<SiteRetransmits>),
    SiteCakeDropsBatch(Vec<SiteCakeDrops>),
    SiteCakeMarksBatch(Vec<SiteCakeMarks>),
    SiteRttBatch(Vec<SiteRtt>),
    ShaperUtilization {
        tick: u64,
        average_cpu: f32,
        peak_cpu: f32,
        memory_percent: f32,
    },
    OneWayFlow {
        start_time: u64,
        end_time: u64,
        local_ip: IpAddr,
        remote_ip: IpAddr,
        protocol: u8,
        dst_port: u16,
        src_port: u16,
        bytes: u64,
        circuit_hash: i64,
    },
    TwoWayFlow {
        start_time: u64,
        end_time: u64,
        local_ip: IpAddr,
        remote_ip: IpAddr,
        protocol: u8,
        dst_port: u16,
        src_port: u16,
        bytes_down: u64,
        bytes_up: u64,
        retransmit_times_down: Vec<i64>,
        retransmit_times_up: Vec<i64>,
        rtt1: f32,
        rtt2: f32,
        circuit_hash: i64,
    },
    AllowSubnet(String),
    IgnoreSubnet(String),
    BlackboardJson(Vec<u8>),
    FlowCount {
        timestamp: u64,
        flow_count: u64,
    },
}